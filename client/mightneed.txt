{/* <div>
<Container style={{marginTop:"75px"}}>
      <Row className="justify-content-md-center">
    <Col xs lg="7">
      <h3>$10.00</h3>
      <Nav.Link href="/checkout"><button>Checkout</button></Nav.Link> */}
      {/* {showItem&& <ShippingForm name={name} setName={setName} address={address} handleAddressForm={handleAddressForm}/>} */}
       {/* </Col>
       </Row>

       </Container>
  </div> */}

  charges controller


  #   session=Stripe::Checkout::Session.create({
  #     line_items:[{
  #       price: params[:price],
  #       quantity:params[:quantity],

  #     }],
  #     mode: "payment",
  #     success_url:'http://localhost:4000'+'?success=true',
  #     cancel_url:'http://localhost:4000'+"?canceled=true",
  #   })
  #   redirect session.url, 303
  # end
end
# '''
# This method doesnot work anymore try different way
#   def create

#     Stripe.api_key ='sk_test_51KHMZ6LX7eA72NUeag5u1hQJjM2mA4mZzEBxgIuKwpNPkk9ekkolUBze9nUhVqAM0E5WpBUeZaVAacZeT9orYvKj00wXc4izAv'
#     ip_key = SecureRandom.uuid
  
#       begin
#         currentUser=User.find_by(id:session[:user_id])
#         customer = Stripe::Customer.create(
#         :email => current_user.email,
#         :source=>params[:charge][:token]
#         # :payment_method => params[:id]
#         )
  
#         puts customer
  
#         charge = Stripe::Charge.create({
#         :customer => customer.id,
#         :amount => params[:charge][:amount],
#         :description => params[:charge][:description],
#         :currency => params[:charge][:currency],
#         }, {
#         :idempotency_key => ip_key
#         })
  
#         puts charge
  
#       rescue Stripe::CardError => e
#         render json: { message: 'oops'}, status: :not_acceptable
#       end
#     end
  
# end
# '''
// import React,{useState} from 'react';
// import {CardElement,PaymentElement,useElements,useStripe} from "@stripe/react-stripe-js"
// import axios from "axios"

// const CARD_OPTIONS = {
// 	iconStyle: "solid",
// 	style: {
// 		base: {
// 			iconColor: "#c4f0ff",
// 			color: "#fff",
// 			fontWeight: 500,
// 			fontFamily: "Roboto, Open Sans, Segoe UI, sans-serif",
// 			fontSize: "16px",
// 			fontSmoothing: "antialiased",
// 			":-webkit-autofill": { color: "#fce883" },
// 			"::placeholder": { color: "#87bbfd" }
// 		},
// 		invalid: {
// 			iconColor: "#ffc7ee",
// 			color: "#ffc7ee"
// 		}
// 	}
// }

// function PaymentForm() {
// const [success,setSuccess]=useState(false)
// const stripe=useStripe()
// const elements=useElements()
//  const handleSubmit= async(e)=>{
//     //  debugger
//      e.preventDefault()

//      const{error,paymentMethod}= await stripe.createPaymentMethod({
//          type:"card",
//          card: elements.getElement(CardElement)
//      })
//     //  let chargeToken= await stripe.createToken({paymentMethod})
//  if(!error){
//      try {
//          const {id}=paymentMethod
//         const response= await axios.post("/payment",{
//             amount: 1000,
//             id,
//             currency:"usd",
//             // token:chargeToken.token.id

//         })
//         if(response.data.success){
//             console.log("successful payment")
//             setSuccess(true)
//         }

//     }
//         catch (error) {
//          console.log("Error",error)
//      }
//  }else {
//      console.log(error.message)
//  }
// }
//   return <>
//     {!success?
//     <form onSubmit={handleSubmit}>
//         <PaymentElement/>
//         <fieldset className="FormGroup">
//          <div className="FormRow">
//              <CardElement options={CARD_OPTIONS}/>
//          </div>
//         </fieldset>
//         <button className="FormRow" style={{justifyContent:"center"}}>Pay</button>
//     </form>
//     :
//     <div>
//         <h2>You just Bought a sweet spatula</h2>
//     </div>
//     }
//   </>;
// }

// export default PaymentForm;

  def must_have_a_role
    unless roles.any?
      errors.add(:roles, "must have atleast one role")
    end
  end

   # validate :must_have_a_role, on: :update